// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file conclave/partitions/v1/partitions.proto (package conclave.partitions.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file conclave/partitions/v1/partitions.proto.
 */
export const file_conclave_partitions_v1_partitions: GenFile = /*@__PURE__*/
  fileDesc("Cidjb25jbGF2ZS9wYXJ0aXRpb25zL3YxL3BhcnRpdGlvbnMucHJvdG8SFmNvbmNsYXZlLnBhcnRpdGlvbnMudjEiOgoJU2V0TnVtYmVyEgsKA3NldBgBIAEoCBIQCghpbmZpbml0ZRgCIAEoCBIOCgZudW1iZXIYAyABKAMiRgoFTm9kZXMSGgoSYWxsb3dlZF9hbGxvY2F0aW9uGAEgASgJEhIKCmNvbmZpZ3VyZWQYAiABKAkSDQoFdG90YWwYAyABKAUiKQoIQWNjb3VudHMSDwoHYWxsb3dlZBgBIAEoCRIMCgRkZW55GAIgASgJIhkKBkdyb3VwcxIPCgdhbGxvd2VkGAEgASgJIjYKA1FvcxIPCgdhbGxvd2VkGAEgASgJEgwKBGRlbnkYAiABKAkSEAoIYXNzaWduZWQYAyABKAkiMwoEVHJlcxIXCg9iaWxsaW5nX3dlaWdodHMYASABKAkSEgoKY29uZmlndXJlZBgCIAEoCSIrCgRDcHVzEhQKDHRhc2tfYmluZGluZxgBIAEoBRINCgV0b3RhbBgCIAEoBSJgCghEZWZhdWx0cxIWCg5tZW1vcnlfcGVyX2NwdRgBIAEoBRIvCgR0aW1lGAIgASgLMiEuY29uY2xhdmUucGFydGl0aW9ucy52MS5TZXROdW1iZXISCwoDam9iGAMgASgJIscCCghNYXhpbXVtcxI4Cg1jcHVzX3Blcl9ub2RlGAEgASgLMiEuY29uY2xhdmUucGFydGl0aW9ucy52MS5TZXROdW1iZXISOgoPY3B1c19wZXJfc29ja2V0GAIgASgLMiEuY29uY2xhdmUucGFydGl0aW9ucy52MS5TZXROdW1iZXISFgoObWVtb3J5X3Blcl9jcHUYAyABKAUSMAoFbm9kZXMYBCABKAsyIS5jb25jbGF2ZS5wYXJ0aXRpb25zLnYxLlNldE51bWJlchIOCgZzaGFyZXMYBSABKAUSLwoEdGltZRgGIAEoCzIhLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuU2V0TnVtYmVyEjoKD292ZXJfdGltZV9saW1pdBgHIAEoCzIhLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuU2V0TnVtYmVyIhkKCE1pbmltdW1zEg0KBW5vZGVzGAEgASgFIiwKCFByaW9yaXR5EhIKCmpvYl9mYWN0b3IYASABKAUSDAoEdGllchgCIAEoBSJxCghUaW1lb3V0cxIxCgZyZXN1bWUYASABKAsyIS5jb25jbGF2ZS5wYXJ0aXRpb25zLnYxLlNldE51bWJlchIyCgdzdXNwZW5kGAIgASgLMiEuY29uY2xhdmUucGFydGl0aW9ucy52MS5TZXROdW1iZXIiHwoOUGFydGl0aW9uU3RhdGUSDQoFc3RhdGUYASADKAki8AUKCVBhcnRpdGlvbhIsCgVub2RlcxgBIAEoCzIdLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuTm9kZXMSMgoIYWNjb3VudHMYAiABKAsyIC5jb25jbGF2ZS5wYXJ0aXRpb25zLnYxLkFjY291bnRzEi4KBmdyb3VwcxgDIAEoCzIeLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuR3JvdXBzEigKA3FvcxgEIAEoCzIbLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuUW9zEhEKCWFsdGVybmF0ZRgFIAEoCRIqCgR0cmVzGAYgASgLMhwuY29uY2xhdmUucGFydGl0aW9ucy52MS5UcmVzEg8KB2NsdXN0ZXIYByABKAkSKgoEY3B1cxgIIAEoCzIcLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuQ3B1cxIyCghkZWZhdWx0cxgJIAEoCzIgLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuRGVmYXVsdHMSEgoKZ3JhY2VfdGltZRgKIAEoBRIyCghtYXhpbXVtcxgLIAEoCzIgLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuTWF4aW11bXMSMgoIbWluaW11bXMYDCABKAsyIC5jb25jbGF2ZS5wYXJ0aXRpb25zLnYxLk1pbmltdW1zEgwKBG5hbWUYDSABKAkSEQoJbm9kZV9zZXRzGA4gASgJEjIKCHByaW9yaXR5GA8gASgLMiAuY29uY2xhdmUucGFydGl0aW9ucy52MS5Qcmlvcml0eRIyCgh0aW1lb3V0cxgQIAEoCzIgLmNvbmNsYXZlLnBhcnRpdGlvbnMudjEuVGltZW91dHMSNwoMc3VzcGVuZF90aW1lGBEgASgLMiEuY29uY2xhdmUucGFydGl0aW9ucy52MS5TZXROdW1iZXISOQoJcGFydGl0aW9uGBIgASgLMiYuY29uY2xhdmUucGFydGl0aW9ucy52MS5QYXJ0aXRpb25TdGF0ZSJGCg1QYXJ0aXRpb25MaXN0EjUKCnBhcnRpdGlvbnMYASADKAsyIS5jb25jbGF2ZS5wYXJ0aXRpb25zLnYxLlBhcnRpdGlvbkJPWk1naXRodWIuY29tL2RkeW1rby9jb25jbGF2ZS1iYWNrZW5kL2dlbi9nby9jb25jbGF2ZS9wYXJ0aXRpb25zL3YxO3BhcnRpdGlvbnN2MWIGcHJvdG8z");

/**
 * Generic message for fields with a "set" flag, "infinite" flag, and a numeric value.
 *
 * @generated from message conclave.partitions.v1.SetNumber
 */
export type SetNumber = Message<"conclave.partitions.v1.SetNumber"> & {
  /**
   * @generated from field: bool set = 1;
   */
  set: boolean;

  /**
   * @generated from field: bool infinite = 2;
   */
  infinite: boolean;

  /**
   * @generated from field: int64 number = 3;
   */
  number: bigint;
};

/**
 * Describes the message conclave.partitions.v1.SetNumber.
 * Use `create(SetNumberSchema)` to create a new message.
 */
export const SetNumberSchema: GenMessage<SetNumber> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 0);

/**
 * Nodes info for the partition.
 *
 * @generated from message conclave.partitions.v1.Nodes
 */
export type Nodes = Message<"conclave.partitions.v1.Nodes"> & {
  /**
   * @generated from field: string allowed_allocation = 1;
   */
  allowedAllocation: string;

  /**
   * @generated from field: string configured = 2;
   */
  configured: string;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;
};

/**
 * Describes the message conclave.partitions.v1.Nodes.
 * Use `create(NodesSchema)` to create a new message.
 */
export const NodesSchema: GenMessage<Nodes> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 1);

/**
 * Accounts settings.
 *
 * @generated from message conclave.partitions.v1.Accounts
 */
export type Accounts = Message<"conclave.partitions.v1.Accounts"> & {
  /**
   * @generated from field: string allowed = 1;
   */
  allowed: string;

  /**
   * @generated from field: string deny = 2;
   */
  deny: string;
};

/**
 * Describes the message conclave.partitions.v1.Accounts.
 * Use `create(AccountsSchema)` to create a new message.
 */
export const AccountsSchema: GenMessage<Accounts> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 2);

/**
 * Groups settings.
 *
 * @generated from message conclave.partitions.v1.Groups
 */
export type Groups = Message<"conclave.partitions.v1.Groups"> & {
  /**
   * @generated from field: string allowed = 1;
   */
  allowed: string;
};

/**
 * Describes the message conclave.partitions.v1.Groups.
 * Use `create(GroupsSchema)` to create a new message.
 */
export const GroupsSchema: GenMessage<Groups> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 3);

/**
 * QoS settings.
 *
 * @generated from message conclave.partitions.v1.Qos
 */
export type Qos = Message<"conclave.partitions.v1.Qos"> & {
  /**
   * @generated from field: string allowed = 1;
   */
  allowed: string;

  /**
   * @generated from field: string deny = 2;
   */
  deny: string;

  /**
   * @generated from field: string assigned = 3;
   */
  assigned: string;
};

/**
 * Describes the message conclave.partitions.v1.Qos.
 * Use `create(QosSchema)` to create a new message.
 */
export const QosSchema: GenMessage<Qos> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 4);

/**
 * Tres settings.
 *
 * @generated from message conclave.partitions.v1.Tres
 */
export type Tres = Message<"conclave.partitions.v1.Tres"> & {
  /**
   * @generated from field: string billing_weights = 1;
   */
  billingWeights: string;

  /**
   * @generated from field: string configured = 2;
   */
  configured: string;
};

/**
 * Describes the message conclave.partitions.v1.Tres.
 * Use `create(TresSchema)` to create a new message.
 */
export const TresSchema: GenMessage<Tres> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 5);

/**
 * CPU details.
 *
 * @generated from message conclave.partitions.v1.Cpus
 */
export type Cpus = Message<"conclave.partitions.v1.Cpus"> & {
  /**
   * @generated from field: int32 task_binding = 1;
   */
  taskBinding: number;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;
};

/**
 * Describes the message conclave.partitions.v1.Cpus.
 * Use `create(CpusSchema)` to create a new message.
 */
export const CpusSchema: GenMessage<Cpus> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 6);

/**
 * Defaults settings.
 *
 * @generated from message conclave.partitions.v1.Defaults
 */
export type Defaults = Message<"conclave.partitions.v1.Defaults"> & {
  /**
   * @generated from field: int32 memory_per_cpu = 1;
   */
  memoryPerCpu: number;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber time = 2;
   */
  time?: SetNumber;

  /**
   * @generated from field: string job = 3;
   */
  job: string;
};

/**
 * Describes the message conclave.partitions.v1.Defaults.
 * Use `create(DefaultsSchema)` to create a new message.
 */
export const DefaultsSchema: GenMessage<Defaults> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 7);

/**
 * Maximum resource limits.
 *
 * @generated from message conclave.partitions.v1.Maximums
 */
export type Maximums = Message<"conclave.partitions.v1.Maximums"> & {
  /**
   * @generated from field: conclave.partitions.v1.SetNumber cpus_per_node = 1;
   */
  cpusPerNode?: SetNumber;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber cpus_per_socket = 2;
   */
  cpusPerSocket?: SetNumber;

  /**
   * @generated from field: int32 memory_per_cpu = 3;
   */
  memoryPerCpu: number;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber nodes = 4;
   */
  nodes?: SetNumber;

  /**
   * @generated from field: int32 shares = 5;
   */
  shares: number;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber time = 6;
   */
  time?: SetNumber;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber over_time_limit = 7;
   */
  overTimeLimit?: SetNumber;
};

/**
 * Describes the message conclave.partitions.v1.Maximums.
 * Use `create(MaximumsSchema)` to create a new message.
 */
export const MaximumsSchema: GenMessage<Maximums> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 8);

/**
 * Minimum resource limits.
 *
 * @generated from message conclave.partitions.v1.Minimums
 */
export type Minimums = Message<"conclave.partitions.v1.Minimums"> & {
  /**
   * @generated from field: int32 nodes = 1;
   */
  nodes: number;
};

/**
 * Describes the message conclave.partitions.v1.Minimums.
 * Use `create(MinimumsSchema)` to create a new message.
 */
export const MinimumsSchema: GenMessage<Minimums> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 9);

/**
 * Priority settings.
 *
 * @generated from message conclave.partitions.v1.Priority
 */
export type Priority = Message<"conclave.partitions.v1.Priority"> & {
  /**
   * @generated from field: int32 job_factor = 1;
   */
  jobFactor: number;

  /**
   * @generated from field: int32 tier = 2;
   */
  tier: number;
};

/**
 * Describes the message conclave.partitions.v1.Priority.
 * Use `create(PrioritySchema)` to create a new message.
 */
export const PrioritySchema: GenMessage<Priority> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 10);

/**
 * Timeout settings.
 *
 * @generated from message conclave.partitions.v1.Timeouts
 */
export type Timeouts = Message<"conclave.partitions.v1.Timeouts"> & {
  /**
   * @generated from field: conclave.partitions.v1.SetNumber resume = 1;
   */
  resume?: SetNumber;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber suspend = 2;
   */
  suspend?: SetNumber;
};

/**
 * Describes the message conclave.partitions.v1.Timeouts.
 * Use `create(TimeoutsSchema)` to create a new message.
 */
export const TimeoutsSchema: GenMessage<Timeouts> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 11);

/**
 * New message for partition state.
 *
 * @generated from message conclave.partitions.v1.PartitionState
 */
export type PartitionState = Message<"conclave.partitions.v1.PartitionState"> & {
  /**
   * @generated from field: repeated string state = 1;
   */
  state: string[];
};

/**
 * Describes the message conclave.partitions.v1.PartitionState.
 * Use `create(PartitionStateSchema)` to create a new message.
 */
export const PartitionStateSchema: GenMessage<PartitionState> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 12);

/**
 * Main partition message.
 *
 * @generated from message conclave.partitions.v1.Partition
 */
export type Partition = Message<"conclave.partitions.v1.Partition"> & {
  /**
   * @generated from field: conclave.partitions.v1.Nodes nodes = 1;
   */
  nodes?: Nodes;

  /**
   * @generated from field: conclave.partitions.v1.Accounts accounts = 2;
   */
  accounts?: Accounts;

  /**
   * @generated from field: conclave.partitions.v1.Groups groups = 3;
   */
  groups?: Groups;

  /**
   * @generated from field: conclave.partitions.v1.Qos qos = 4;
   */
  qos?: Qos;

  /**
   * @generated from field: string alternate = 5;
   */
  alternate: string;

  /**
   * @generated from field: conclave.partitions.v1.Tres tres = 6;
   */
  tres?: Tres;

  /**
   * @generated from field: string cluster = 7;
   */
  cluster: string;

  /**
   * @generated from field: conclave.partitions.v1.Cpus cpus = 8;
   */
  cpus?: Cpus;

  /**
   * @generated from field: conclave.partitions.v1.Defaults defaults = 9;
   */
  defaults?: Defaults;

  /**
   * @generated from field: int32 grace_time = 10;
   */
  graceTime: number;

  /**
   * @generated from field: conclave.partitions.v1.Maximums maximums = 11;
   */
  maximums?: Maximums;

  /**
   * @generated from field: conclave.partitions.v1.Minimums minimums = 12;
   */
  minimums?: Minimums;

  /**
   * @generated from field: string name = 13;
   */
  name: string;

  /**
   * @generated from field: string node_sets = 14;
   */
  nodeSets: string;

  /**
   * @generated from field: conclave.partitions.v1.Priority priority = 15;
   */
  priority?: Priority;

  /**
   * @generated from field: conclave.partitions.v1.Timeouts timeouts = 16;
   */
  timeouts?: Timeouts;

  /**
   * @generated from field: conclave.partitions.v1.SetNumber suspend_time = 17;
   */
  suspendTime?: SetNumber;

  /**
   * @generated from field: conclave.partitions.v1.PartitionState partition = 18;
   */
  partition?: PartitionState;
};

/**
 * Describes the message conclave.partitions.v1.Partition.
 * Use `create(PartitionSchema)` to create a new message.
 */
export const PartitionSchema: GenMessage<Partition> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 13);

/**
 * Container for a list of partitions.
 *
 * @generated from message conclave.partitions.v1.PartitionList
 */
export type PartitionList = Message<"conclave.partitions.v1.PartitionList"> & {
  /**
   * @generated from field: repeated conclave.partitions.v1.Partition partitions = 1;
   */
  partitions: Partition[];
};

/**
 * Describes the message conclave.partitions.v1.PartitionList.
 * Use `create(PartitionListSchema)` to create a new message.
 */
export const PartitionListSchema: GenMessage<PartitionList> = /*@__PURE__*/
  messageDesc(file_conclave_partitions_v1_partitions, 14);

