// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file conclave/nodes/v1/nodes.proto (package conclave.nodes.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file conclave/nodes/v1/nodes.proto.
 */
export const file_conclave_nodes_v1_nodes: GenFile = /*@__PURE__*/
  fileDesc("Ch1jb25jbGF2ZS9ub2Rlcy92MS9ub2Rlcy5wcm90bxIRY29uY2xhdmUubm9kZXMudjEiOgoJU2V0TnVtYmVyEgsKA3NldBgBIAEoCBIQCghpbmZpbml0ZRgCIAEoCBIOCgZudW1iZXIYAyABKAMixQEKBkVuZXJneRIVCg1hdmVyYWdlX3dhdHRzGAEgASgDEhwKFGJhc2VfY29uc3VtZWRfZW5lcmd5GAIgASgDEhcKD2NvbnN1bWVkX2VuZXJneRgDIAEoAxIzCg1jdXJyZW50X3dhdHRzGAQgASgLMhwuY29uY2xhdmUubm9kZXMudjEuU2V0TnVtYmVyEiAKGHByZXZpb3VzX2NvbnN1bWVkX2VuZXJneRgFIAEoAxIWCg5sYXN0X2NvbGxlY3RlZBgGIAEoAyKuAQoPRXh0ZXJuYWxTZW5zb3JzEjUKD2NvbnN1bWVkX2VuZXJneRgBIAEoCzIcLmNvbmNsYXZlLm5vZGVzLnYxLlNldE51bWJlchIxCgt0ZW1wZXJhdHVyZRgCIAEoCzIcLmNvbmNsYXZlLm5vZGVzLnYxLlNldE51bWJlchIaChJlbmVyZ3lfdXBkYXRlX3RpbWUYAyABKAMSFQoNY3VycmVudF93YXR0cxgEIAEoAyKJAgoFUG93ZXISMwoNbWF4aW11bV93YXR0cxgBIAEoCzIcLmNvbmNsYXZlLm5vZGVzLnYxLlNldE51bWJlchIVCg1jdXJyZW50X3dhdHRzGAIgASgDEhQKDHRvdGFsX2VuZXJneRgDIAEoAxIZChFuZXdfbWF4aW11bV93YXR0cxgEIAEoAxISCgpwZWFrX3dhdHRzGAUgASgDEhQKDGxvd2VzdF93YXR0cxgGIAEoAxIyCgxuZXdfam9iX3RpbWUYByABKAsyHC5jb25jbGF2ZS5ub2Rlcy52MS5TZXROdW1iZXISDQoFc3RhdGUYCCABKAMSFgoOdGltZV9zdGFydF9kYXkYCSABKAMi9woKBE5vZGUSFAoMYXJjaGl0ZWN0dXJlGAEgASgJEiMKG2J1cnN0YnVmZmVyX25ldHdvcmtfYWRkcmVzcxgCIAEoCRIOCgZib2FyZHMYAyABKAUSLwoJYm9vdF90aW1lGAQgASgLMhwuY29uY2xhdmUubm9kZXMudjEuU2V0TnVtYmVyEhQKDGNsdXN0ZXJfbmFtZRgFIAEoCRINCgVjb3JlcxgGIAEoBRIZChFzcGVjaWFsaXplZF9jb3JlcxgHIAEoBRITCgtjcHVfYmluZGluZxgIIAEoBRIQCghjcHVfbG9hZBgJIAEoBRIuCghmcmVlX21lbRgKIAEoCzIcLmNvbmNsYXZlLm5vZGVzLnYxLlNldE51bWJlchIMCgRjcHVzGAsgASgFEhYKDmVmZmVjdGl2ZV9jcHVzGAwgASgFEhgKEHNwZWNpYWxpemVkX2NwdXMYDSABKAkSKQoGZW5lcmd5GA4gASgLMhkuY29uY2xhdmUubm9kZXMudjEuRW5lcmd5EjwKEGV4dGVybmFsX3NlbnNvcnMYDyABKAsyIi5jb25jbGF2ZS5ub2Rlcy52MS5FeHRlcm5hbFNlbnNvcnMSDQoFZXh0cmEYECABKAkSJwoFcG93ZXIYESABKAsyGC5jb25jbGF2ZS5ub2Rlcy52MS5Qb3dlchIQCghmZWF0dXJlcxgSIAMoCRIXCg9hY3RpdmVfZmVhdHVyZXMYEyADKAkSDAoEZ3JlcxgUIAEoCRIUCgxncmVzX2RyYWluZWQYFSABKAkSEQoJZ3Jlc191c2VkGBYgASgJEhMKC2luc3RhbmNlX2lkGBcgASgJEhUKDWluc3RhbmNlX3R5cGUYGCABKAkSLwoJbGFzdF9idXN5GBkgASgLMhwuY29uY2xhdmUubm9kZXMudjEuU2V0TnVtYmVyEhEKCW1jc19sYWJlbBgaIAEoCRIaChJzcGVjaWFsaXplZF9tZW1vcnkYGyABKAUSDAoEbmFtZRgcIAEoCRIfChduZXh0X3N0YXRlX2FmdGVyX3JlYm9vdBgdIAMoCRIPCgdhZGRyZXNzGB4gASgJEhAKCGhvc3RuYW1lGB8gASgJEg0KBXN0YXRlGCAgAygJEhgKEG9wZXJhdGluZ19zeXN0ZW0YISABKAkSDQoFb3duZXIYIiABKAkSEgoKcGFydGl0aW9ucxgjIAMoCRIMCgRwb3J0GCQgASgFEhMKC3JlYWxfbWVtb3J5GCUgASgFEg8KB2NvbW1lbnQYJiABKAkSDgoGcmVhc29uGCcgASgJEjcKEXJlYXNvbl9jaGFuZ2VkX2F0GCggASgLMhwuY29uY2xhdmUubm9kZXMudjEuU2V0TnVtYmVyEhoKEnJlYXNvbl9zZXRfYnlfdXNlchgpIAEoCRIyCgxyZXN1bWVfYWZ0ZXIYKiABKAsyHC5jb25jbGF2ZS5ub2Rlcy52MS5TZXROdW1iZXISEwoLcmVzZXJ2YXRpb24YKyABKAkSFAoMYWxsb2NfbWVtb3J5GCwgASgFEhIKCmFsbG9jX2NwdXMYLSABKAUSFwoPYWxsb2NfaWRsZV9jcHVzGC4gASgFEhEKCXRyZXNfdXNlZBgvIAEoCRIVCg10cmVzX3dlaWdodGVkGDAgASgBEjcKEXNsdXJtZF9zdGFydF90aW1lGDEgASgLMhwuY29uY2xhdmUubm9kZXMudjEuU2V0TnVtYmVyEg8KB3NvY2tldHMYMiABKAUSDwoHdGhyZWFkcxgzIAEoBRIWCg50ZW1wb3JhcnlfZGlzaxg0IAEoBRIOCgZ3ZWlnaHQYNSABKAUSDAoEdHJlcxg2IAEoCRIPCgd2ZXJzaW9uGDcgASgJIjIKCE5vZGVMaXN0EiYKBW5vZGVzGAEgAygLMhcuY29uY2xhdmUubm9kZXMudjEuTm9kZUJFWkNnaXRodWIuY29tL2RkeW1rby9jb25jbGF2ZS1iYWNrZW5kL2dlbi9nby9jb25jbGF2ZS9ub2Rlcy92MTtub2Rlc3YxYgZwcm90bzM");

/**
 * A generic message to represent fields that have a "set" flag, an "infinite" flag, and a numeric value.
 *
 * @generated from message conclave.nodes.v1.SetNumber
 */
export type SetNumber = Message<"conclave.nodes.v1.SetNumber"> & {
  /**
   * @generated from field: bool set = 1;
   */
  set: boolean;

  /**
   * @generated from field: bool infinite = 2;
   */
  infinite: boolean;

  /**
   * @generated from field: int64 number = 3;
   */
  number: bigint;
};

/**
 * Describes the message conclave.nodes.v1.SetNumber.
 * Use `create(SetNumberSchema)` to create a new message.
 */
export const SetNumberSchema: GenMessage<SetNumber> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 0);

/**
 * Energy-related metrics.
 *
 * @generated from message conclave.nodes.v1.Energy
 */
export type Energy = Message<"conclave.nodes.v1.Energy"> & {
  /**
   * @generated from field: int64 average_watts = 1;
   */
  averageWatts: bigint;

  /**
   * @generated from field: int64 base_consumed_energy = 2;
   */
  baseConsumedEnergy: bigint;

  /**
   * @generated from field: int64 consumed_energy = 3;
   */
  consumedEnergy: bigint;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber current_watts = 4;
   */
  currentWatts?: SetNumber;

  /**
   * @generated from field: int64 previous_consumed_energy = 5;
   */
  previousConsumedEnergy: bigint;

  /**
   * @generated from field: int64 last_collected = 6;
   */
  lastCollected: bigint;
};

/**
 * Describes the message conclave.nodes.v1.Energy.
 * Use `create(EnergySchema)` to create a new message.
 */
export const EnergySchema: GenMessage<Energy> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 1);

/**
 * External sensors measurements.
 *
 * @generated from message conclave.nodes.v1.ExternalSensors
 */
export type ExternalSensors = Message<"conclave.nodes.v1.ExternalSensors"> & {
  /**
   * @generated from field: conclave.nodes.v1.SetNumber consumed_energy = 1;
   */
  consumedEnergy?: SetNumber;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber temperature = 2;
   */
  temperature?: SetNumber;

  /**
   * @generated from field: int64 energy_update_time = 3;
   */
  energyUpdateTime: bigint;

  /**
   * @generated from field: int64 current_watts = 4;
   */
  currentWatts: bigint;
};

/**
 * Describes the message conclave.nodes.v1.ExternalSensors.
 * Use `create(ExternalSensorsSchema)` to create a new message.
 */
export const ExternalSensorsSchema: GenMessage<ExternalSensors> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 2);

/**
 * Power metrics.
 *
 * @generated from message conclave.nodes.v1.Power
 */
export type Power = Message<"conclave.nodes.v1.Power"> & {
  /**
   * @generated from field: conclave.nodes.v1.SetNumber maximum_watts = 1;
   */
  maximumWatts?: SetNumber;

  /**
   * @generated from field: int64 current_watts = 2;
   */
  currentWatts: bigint;

  /**
   * @generated from field: int64 total_energy = 3;
   */
  totalEnergy: bigint;

  /**
   * @generated from field: int64 new_maximum_watts = 4;
   */
  newMaximumWatts: bigint;

  /**
   * @generated from field: int64 peak_watts = 5;
   */
  peakWatts: bigint;

  /**
   * @generated from field: int64 lowest_watts = 6;
   */
  lowestWatts: bigint;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber new_job_time = 7;
   */
  newJobTime?: SetNumber;

  /**
   * @generated from field: int64 state = 8;
   */
  state: bigint;

  /**
   * @generated from field: int64 time_start_day = 9;
   */
  timeStartDay: bigint;
};

/**
 * Describes the message conclave.nodes.v1.Power.
 * Use `create(PowerSchema)` to create a new message.
 */
export const PowerSchema: GenMessage<Power> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 3);

/**
 * Main node message.
 *
 * @generated from message conclave.nodes.v1.Node
 */
export type Node = Message<"conclave.nodes.v1.Node"> & {
  /**
   * @generated from field: string architecture = 1;
   */
  architecture: string;

  /**
   * @generated from field: string burstbuffer_network_address = 2;
   */
  burstbufferNetworkAddress: string;

  /**
   * @generated from field: int32 boards = 3;
   */
  boards: number;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber boot_time = 4;
   */
  bootTime?: SetNumber;

  /**
   * @generated from field: string cluster_name = 5;
   */
  clusterName: string;

  /**
   * @generated from field: int32 cores = 6;
   */
  cores: number;

  /**
   * @generated from field: int32 specialized_cores = 7;
   */
  specializedCores: number;

  /**
   * @generated from field: int32 cpu_binding = 8;
   */
  cpuBinding: number;

  /**
   * @generated from field: int32 cpu_load = 9;
   */
  cpuLoad: number;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber free_mem = 10;
   */
  freeMem?: SetNumber;

  /**
   * @generated from field: int32 cpus = 11;
   */
  cpus: number;

  /**
   * @generated from field: int32 effective_cpus = 12;
   */
  effectiveCpus: number;

  /**
   * @generated from field: string specialized_cpus = 13;
   */
  specializedCpus: string;

  /**
   * @generated from field: conclave.nodes.v1.Energy energy = 14;
   */
  energy?: Energy;

  /**
   * @generated from field: conclave.nodes.v1.ExternalSensors external_sensors = 15;
   */
  externalSensors?: ExternalSensors;

  /**
   * @generated from field: string extra = 16;
   */
  extra: string;

  /**
   * @generated from field: conclave.nodes.v1.Power power = 17;
   */
  power?: Power;

  /**
   * @generated from field: repeated string features = 18;
   */
  features: string[];

  /**
   * @generated from field: repeated string active_features = 19;
   */
  activeFeatures: string[];

  /**
   * @generated from field: string gres = 20;
   */
  gres: string;

  /**
   * @generated from field: string gres_drained = 21;
   */
  gresDrained: string;

  /**
   * @generated from field: string gres_used = 22;
   */
  gresUsed: string;

  /**
   * @generated from field: string instance_id = 23;
   */
  instanceId: string;

  /**
   * @generated from field: string instance_type = 24;
   */
  instanceType: string;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber last_busy = 25;
   */
  lastBusy?: SetNumber;

  /**
   * @generated from field: string mcs_label = 26;
   */
  mcsLabel: string;

  /**
   * @generated from field: int32 specialized_memory = 27;
   */
  specializedMemory: number;

  /**
   * @generated from field: string name = 28;
   */
  name: string;

  /**
   * @generated from field: repeated string next_state_after_reboot = 29;
   */
  nextStateAfterReboot: string[];

  /**
   * @generated from field: string address = 30;
   */
  address: string;

  /**
   * @generated from field: string hostname = 31;
   */
  hostname: string;

  /**
   * @generated from field: repeated string state = 32;
   */
  state: string[];

  /**
   * @generated from field: string operating_system = 33;
   */
  operatingSystem: string;

  /**
   * @generated from field: string owner = 34;
   */
  owner: string;

  /**
   * @generated from field: repeated string partitions = 35;
   */
  partitions: string[];

  /**
   * @generated from field: int32 port = 36;
   */
  port: number;

  /**
   * @generated from field: int32 real_memory = 37;
   */
  realMemory: number;

  /**
   * @generated from field: string comment = 38;
   */
  comment: string;

  /**
   * @generated from field: string reason = 39;
   */
  reason: string;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber reason_changed_at = 40;
   */
  reasonChangedAt?: SetNumber;

  /**
   * @generated from field: string reason_set_by_user = 41;
   */
  reasonSetByUser: string;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber resume_after = 42;
   */
  resumeAfter?: SetNumber;

  /**
   * @generated from field: string reservation = 43;
   */
  reservation: string;

  /**
   * @generated from field: int32 alloc_memory = 44;
   */
  allocMemory: number;

  /**
   * @generated from field: int32 alloc_cpus = 45;
   */
  allocCpus: number;

  /**
   * @generated from field: int32 alloc_idle_cpus = 46;
   */
  allocIdleCpus: number;

  /**
   * @generated from field: string tres_used = 47;
   */
  tresUsed: string;

  /**
   * @generated from field: double tres_weighted = 48;
   */
  tresWeighted: number;

  /**
   * @generated from field: conclave.nodes.v1.SetNumber slurmd_start_time = 49;
   */
  slurmdStartTime?: SetNumber;

  /**
   * @generated from field: int32 sockets = 50;
   */
  sockets: number;

  /**
   * @generated from field: int32 threads = 51;
   */
  threads: number;

  /**
   * @generated from field: int32 temporary_disk = 52;
   */
  temporaryDisk: number;

  /**
   * @generated from field: int32 weight = 53;
   */
  weight: number;

  /**
   * @generated from field: string tres = 54;
   */
  tres: string;

  /**
   * @generated from field: string version = 55;
   */
  version: string;
};

/**
 * Describes the message conclave.nodes.v1.Node.
 * Use `create(NodeSchema)` to create a new message.
 */
export const NodeSchema: GenMessage<Node> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 4);

/**
 * Container for a list of nodes.
 *
 * @generated from message conclave.nodes.v1.NodeList
 */
export type NodeList = Message<"conclave.nodes.v1.NodeList"> & {
  /**
   * @generated from field: repeated conclave.nodes.v1.Node nodes = 1;
   */
  nodes: Node[];
};

/**
 * Describes the message conclave.nodes.v1.NodeList.
 * Use `create(NodeListSchema)` to create a new message.
 */
export const NodeListSchema: GenMessage<NodeList> = /*@__PURE__*/
  messageDesc(file_conclave_nodes_v1_nodes, 5);

